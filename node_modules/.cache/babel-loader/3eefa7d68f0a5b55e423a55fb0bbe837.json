{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pc/Documentos/github-repositorio-projeto/src/pages/Repository/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { FiChevronLeft } from 'react-icons/fi';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\n/*1*/\n\nimport api from '../../services/api';\nimport logoImg from \"../../assets/images/logotipo.svg\";\nimport { Header, ReposityInfo, Issues } from './styles';\n\nconst Reposity = () => {\n  _s();\n\n  const {\n    params\n  } = useRouteMatch();\n  const [repository, setRepository] = useState(null);\n  /*3*/\n\n  /*4*/\n\n  const [issues, setIssues] = useState([]);\n  /*\n  /*2*/\n  //Para acessar as issues do repositório precisa acessar no link do github a opção issue. Será armazenado no response e será necessário adicionar no array a varivel params.repository, porque se não adicionar, provavelmente sua variavel será refeita sempre que modificar/atualizar.\n\n  /*\n  /*3*/\n\n  /*O repositório pode ser repositório ou nulo.\n  */\n\n  /*4*/\n\n  /*\n  const [repository, setRepository] = useState<Repository | null>(null);  Se ele for nulo, e nao repositório, o que ser mostrado na interface?\n  Então foi criado a seguinte condição, se tiver repositórion, será exibido a seguinte informação:\n  {repository && (\n  <ReposityInfo>\n  <header>\n    <img src={repository?.owner.avatar_url} alt=\"Mercia Keila\"/>\n    <div><strong>{params.repository}</strong>\n  <p>Descrição do repo</p></div>\n  </header>\n  <ul>\n  <li>\n    <strong>1808</strong>\n    <span>Stars </span>\n  </li>\n  <li>\n    <strong>48</strong>\n    <span>Forks</span>\n  </li>\n  <li>\n    <strong>67</strong>\n    <span>Issues abertas</span>\n  </li>\n  </ul>\n  </ReposityInfo>\n  )}\n  */\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then(response => {\n      /*2*/\n      setRepository(response.data);\n    });\n  }, [params.repository]);\n  useEffect(() => {\n    api.get(`repos/${params.repository}/issues`).then(response => {\n      /*2*/\n      setRepository(response.data);\n    });\n  }, [params.repository]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logoImg,\n        alt: \"Github Explorer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(FiChevronLeft, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this), \"Voltar\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), repository && /*#__PURE__*/_jsxDEV(ReposityInfo, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: repository.owner.avatar_url,\n          alt: repository.owner.login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: repository.full_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: repository.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: repository.stargazers_count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Stars\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: repository.forks_count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Forks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: repository.open_issues_count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Issues abertas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Issues, {\n      children: issues.map(issue => /*#__PURE__*/_jsxDEV(\"a\", {\n        href: issue.html_url,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: issue.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: issue.user.login\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(FiChevronRight, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this)]\n      }, issue.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Reposity, \"n3QoBMM+kLXpGVKyMZtYcuUuQ/8=\", false, function () {\n  return [useRouteMatch];\n});\n\n_c = Reposity;\nexport default Reposity;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reposity\");","map":{"version":3,"sources":["/home/pc/Documentos/github-repositorio-projeto/src/pages/Repository/index.tsx"],"names":["React","useEffect","useState","FiChevronLeft","useRouteMatch","Link","FiChevronRight","api","Header","ReposityInfo","Issues","Reposity","params","repository","setRepository","issues","setIssues","get","then","response","data","logoImg","owner","avatar_url","login","full_name","description","stargazers_count","forks_count","open_issues_count","map","issue","html_url","title","user","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FiChevronLeft } from 'react-icons/fi';\nimport {useRouteMatch, Link} from 'react-router-dom';\nimport {FiChevronRight} from 'react-icons/fi';\n/*1*/ import api from '../../services/api';\n\nimport logoImg from '../../assets/images/logotipo.svg';\nimport {Header, ReposityInfo, Issues} from './styles';\n\ninterface RepositoryParams {\n  repository: string\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  }\n}\n\ninterface Issue {\n  id: number\n  title: string;\n  html_url: string\n  user: {\n    login: string\n  }\n}\n\nconst Reposity: React.FC = () => {\n  const { params } = useRouteMatch<RepositoryParams>();\n  const [repository, setRepository] = useState<Repository | null>(null); /*3*/ /*4*/\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  /*\n  /*2*/ //Para acessar as issues do repositório precisa acessar no link do github a opção issue. Será armazenado no response e será necessário adicionar no array a varivel params.repository, porque se não adicionar, provavelmente sua variavel será refeita sempre que modificar/atualizar.\n\n  /*\n  /*3*/ /*O repositório pode ser repositório ou nulo.\n  */\n\n  /*4*/ /*\n      const [repository, setRepository] = useState<Repository | null>(null);  Se ele for nulo, e nao repositório, o que ser mostrado na interface?\n\n      Então foi criado a seguinte condição, se tiver repositórion, será exibido a seguinte informação:\n\n      {repository && (\n      <ReposityInfo>\n      <header>\n          <img src={repository?.owner.avatar_url} alt=\"Mercia Keila\"/>\n          <div><strong>{params.repository}</strong>\n      <p>Descrição do repo</p></div>\n      </header>\n      <ul>\n        <li>\n          <strong>1808</strong>\n          <span>Stars </span>\n      </li>\n      <li>\n          <strong>48</strong>\n          <span>Forks</span>\n      </li>\n      <li>\n          <strong>67</strong>\n          <span>Issues abertas</span>\n      </li>\n      </ul>\n    </ReposityInfo>\n    )}\n\n  */\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then(response => {  /*2*/\n      setRepository(response.data);\n    })\n  }, [params.repository]);\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}/issues`).then(response => {  /*2*/\n      setRepository(response.data);\n    })\n  }, [params.repository]);\n\n  return (\n    <>\n    <Header>\n    <img src={logoImg} alt=\"Github Explorer\" />\n    <Link to=\"/\">\n      <FiChevronLeft size={16} />\n      Voltar\n    </Link>\n    </Header>\n    {repository && (\n      <ReposityInfo>\n      <header>\n          <img src={repository.owner.avatar_url} alt={repository.owner.login}/>\n          <div><strong>{repository.full_name}</strong>\n          <p>{repository.description}</p></div>\n      </header>\n      <ul>\n        <li>\n          <strong>{repository.stargazers_count}</strong>\n          <span>Stars</span>\n      </li>\n      <li>\n          <strong>{repository.forks_count}</strong>\n          <span>Forks</span>\n      </li>\n      <li>\n          <strong>{repository.open_issues_count}</strong>\n          <span>Issues abertas</span>\n      </li>\n      </ul>\n    </ReposityInfo>\n    )}\n    <Issues>\n     {\n       issues.map(issue => (\n          <a key={issue.id} href={issue.html_url}>\n        <div>\n         <strong>{issue.title}</strong>\n        <p>{issue.user.login}</p>\n        </div>\n        <FiChevronRight size={20}/>\n      </a>\n       ))\n     }\n    </Issues>\n    </>\n  )\n}\n\nexport default Reposity;\n"]},"metadata":{},"sourceType":"module"}