{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pc/Documentos/github-repositorio-projeto/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Title, Form, Repositories } from './styles';\nimport { FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\nimport logoImg from \"../../assets/images/logotipo.svg\"; //import Repository from '../Repository';\n// Essa interface é a definição dos tipos que existe na api publica do github\n\nconst Dashboard = () => {\n  _s();\n\n  const [newRepo, setNewRepo] = useState(''); // Estado para armazenar o valor do input\n\n  const [repositories, setRepositories] = useState([]); //Vai armazenar os repositórios usando o useState. Foi adicionado o <Repository[]> após o usState porque ele ta pegando o array de repositórios que o setRepositories ta recebendo.\n\n  async function hundleAddRepository(event) {\n    //Adição de um novo repositŕoio\n    //Consumir a API do Github buscado\n    //Salvar novo respositório no estado\n\n    /* (event: FormEvent<HTMLFormElement>) junto com o event.preventDefault();\n    Previne o evento de recarregar a página sempre quando clica, nesse caso teve essa extenção maior porque o evento é no form, por isso, teve que importar o FormEvent tambem. Então foi passado um uma tipagem pronta nativo para formulário.\n    */\n    // async é significa função assicrona é necessário para trabalhar com a API.\n    // Quando a função passa a ser async é necessaŕio usar o Promise<void>\n    event.preventDefault(); // Chamada da API\n\n    const response = await api.get(`repos/${newRepo}`);\n    const repository = response.data; // repository está recebendo a informação do response, o response ta armazebando as informações da api. Já o data, seria as informações dos objetos.\n    //A API ta pegando os dados que ta armazenado em: ${newRepo} para assim ser inserido na pesquisa\n    // api.get(`repos/${newRepo}`) Em repos/ é a prévia fixa da URL de pesquisa\n    // O const repository são os dados que precisam ser adicionados ao fim da lista (Próxima etapa do projeto)\n    // Foi adicionado <Repository>, para pegar as informações baseadas na tipagem definina na interface Repository\n\n    setRepositories([...repositories, repository]);\n  }\n  /* No input, o valor que vai receber é o value={newRepo}\n  Quando o usuário altera o valor desse input, recebe um evento onChange={(e) => setNewRepo(e.target.value)}\n  */\n  //No uso do map, foi adicionado o estado repositories que está recebendo um array e definindo um parametro, e no primeiro intem é importanten adicionar uma Key=\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logoImg,\n      alt: \"Github Explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      children: \"Explore reposit\\xF3rios no Github\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: hundleAddRepository,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Digite o nome do reposit\\xF3rio\",\n        value: newRepo,\n        onChange: e => setNewRepo(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Pesquisar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Repositories, {\n      children: repositories.map(repository => /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"teste\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: repository.owner.avatar_url,\n          alt: repository.owner.login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: repository.full_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: repository.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(FiChevronRight, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)]\n      }, repository.full_name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Dashboard, \"9YWBVAaaWt2rSNmbXjgX8puY7YM=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/pc/Documentos/github-repositorio-projeto/src/pages/Dashboard/index.tsx"],"names":["React","useState","Title","Form","Repositories","FiChevronRight","api","Dashboard","newRepo","setNewRepo","repositories","setRepositories","hundleAddRepository","event","preventDefault","response","get","repository","data","logoImg","e","target","value","map","owner","avatar_url","login","full_name","description"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAAyC,OAAzC;AACA,SAAQC,KAAR,EAAeC,IAAf,EAAqBC,YAArB,QAAwC,UAAxC;AACA,SAAQC,cAAR,QAA6B,gBAA7B;AACA,OAAOC,GAAP,MAAgB,oBAAhB;wDAEA;AAEA;;AAUA,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CADgC,CACY;;AAC5C,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAe,EAAf,CAAhD,CAFgC,CAEkC;;AAGlE,iBAAeW,mBAAf,CAAmCC,KAAnC,EAAoF;AAClF;AACA;AACA;;AACA;AACJ;AACA;AACG;AACA;AAECA,IAAAA,KAAK,CAACC,cAAN,GAVkF,CAYlF;;AACA,UAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAJ,CAAqB,SAAQR,OAAQ,EAArC,CAAvB;AAEA,UAAMS,UAAU,GAAGF,QAAQ,CAACG,IAA5B,CAfkF,CAehD;AAElC;AACA;AACA;AACA;;AAEAP,IAAAA,eAAe,CAAC,CAAC,GAAGD,YAAJ,EAAkBO,UAAlB,CAAD,CAAf;AACD;AAED;AACF;AACA;AAEE;;;AAEA,sBACE;AAAA,4BACA;AAAK,MAAA,GAAG,EAAEE,OAAV;AAAmB,MAAA,GAAG,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAIA,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEP,mBAAhB;AAAA,8BACE;AAAO,QAAA,WAAW,EAAC,iCAAnB;AAAkD,QAAA,KAAK,EAAEJ,OAAzD;AAAkE,QAAA,QAAQ,EAAGY,CAAD,IAAOX,UAAU,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV;AAA7F;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA,eAWA,QAAC,YAAD;AAAA,gBACEZ,YAAY,CAACa,GAAb,CAAiBN,UAAU,iBACzB;AAA8B,QAAA,IAAI,EAAC,OAAnC;AAAA,gCACA;AAAK,UAAA,GAAG,EAAEA,UAAU,CAACO,KAAX,CAAiBC,UAA3B;AAAuC,UAAA,GAAG,EAAER,UAAU,CAACO,KAAX,CAAiBE;AAA7D;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAA,kCACH;AAAA,sBAAST,UAAU,CAACU;AAApB;AAAA;AAAA;AAAA;AAAA,kBADG,eAEF;AAAA,sBAAIV,UAAU,CAACW;AAAf;AAAA;AAAA;AAAA;AAAA,kBAFE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAMA,QAAC,cAAD;AAAgB,UAAA,IAAI,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA,gBANA;AAAA,SAAQX,UAAU,CAACU,SAAnB;AAAA;AAAA;AAAA;AAAA,cADF;AADF;AAAA;AAAA;AAAA;AAAA,YAXA;AAAA,kBADF;AA0BD,CA9DD;;GAAMpB,S;;KAAAA,S;AAgEN,eAAeA,SAAf","sourcesContent":["import React, {useState, FormEvent} from 'react';\nimport {Title, Form, Repositories} from './styles';\nimport {FiChevronRight} from 'react-icons/fi';\nimport api from '../../services/api';\nimport logoImg from '../../assets/images/logotipo.svg';\n//import Repository from '../Repository';\n\n// Essa interface é a definição dos tipos que existe na api publica do github\ninterface Repository {\n  full_name: string;\n  description: string\n  owner: {\n    login: string;\n    avatar_url: string;\n  }\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState(''); // Estado para armazenar o valor do input\n  const [repositories, setRepositories] = useState<Repository[]>([])//Vai armazenar os repositórios usando o useState. Foi adicionado o <Repository[]> após o usState porque ele ta pegando o array de repositórios que o setRepositories ta recebendo.\n\n\n  async function hundleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void>{\n    //Adição de um novo repositŕoio\n    //Consumir a API do Github buscado\n    //Salvar novo respositório no estado\n    /* (event: FormEvent<HTMLFormElement>) junto com o event.preventDefault();\n    Previne o evento de recarregar a página sempre quando clica, nesse caso teve essa extenção maior porque o evento é no form, por isso, teve que importar o FormEvent tambem. Então foi passado um uma tipagem pronta nativo para formulário.\n    */\n   // async é significa função assicrona é necessário para trabalhar com a API.\n   // Quando a função passa a ser async é necessaŕio usar o Promise<void>\n\n    event.preventDefault();\n\n    // Chamada da API\n    const response = await api.get<Repository>(`repos/${newRepo}`);\n\n    const repository = response.data; // repository está recebendo a informação do response, o response ta armazebando as informações da api. Já o data, seria as informações dos objetos.\n\n    //A API ta pegando os dados que ta armazenado em: ${newRepo} para assim ser inserido na pesquisa\n    // api.get(`repos/${newRepo}`) Em repos/ é a prévia fixa da URL de pesquisa\n    // O const repository são os dados que precisam ser adicionados ao fim da lista (Próxima etapa do projeto)\n    // Foi adicionado <Repository>, para pegar as informações baseadas na tipagem definina na interface Repository\n\n    setRepositories([...repositories, repository]);\n  }\n\n  /* No input, o valor que vai receber é o value={newRepo}\n  Quando o usuário altera o valor desse input, recebe um evento onChange={(e) => setNewRepo(e.target.value)}\n  */\n\n  //No uso do map, foi adicionado o estado repositories que está recebendo um array e definindo um parametro, e no primeiro intem é importanten adicionar uma Key=\n\n  return (\n    <>\n    <img src={logoImg} alt=\"Github Explorer\" />\n    <Title>Explore repositórios no Github</Title>\n\n    <Form onSubmit={hundleAddRepository}>\n      <input placeholder=\"Digite o nome do repositório\" value={newRepo} onChange={(e) => setNewRepo(e.target.value)}/>\n      <button type=\"submit\">\n        Pesquisar\n      </button>\n    </Form>\n\n    <Repositories>\n     {repositories.map(repository => (\n        <a key={repository.full_name} href=\"teste\">\n        <img src={repository.owner.avatar_url} alt={repository.owner.login}/>\n        <div>\n     <strong>{repository.full_name}</strong>\n      <p>{repository.description}</p>\n        </div>\n        <FiChevronRight size={20}/>\n      </a>\n     ))}\n    </Repositories>\n    </>\n  )\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}